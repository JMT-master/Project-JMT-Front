@Component
public class WebSocketHandler extends TextWebSocketHandler {

    private static final Map<String, WebSocketSession> sessions = new ConcurrentHashMap<>();

    @Override
    public void afterConnectionEstablished(WebSocketSession session) {
        // 사용자 ID를 세션의 attribute로 저장하여 식별합니다.
        String userId = getUserIdFromSession(session);
        sessions.put(userId, session);
    }

    @Override
    protected void handleTextMessage(WebSocketSession session, TextMessage message) {
        // 메시지 처리 로직...
    }

    @Override
    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) {
        // 세션 종료 시 세션을 맵에서 제거합니다.
        String userId = getUserIdFromSession(session);
        sessions.remove(userId);
    }

    private String getUserIdFromSession(WebSocketSession session) {
        // 세션에서 사용자 ID를 추출하는 로직을 작성합니다.
        // 예: 세션의 attribute로부터 사용자 ID를 추출하여 반환합니다.
        // 예를 들어, session.getAttributes().get("userId")와 같은 방법으로 사용자 ID를 추출할 수 있습니다.
        return session.getId(); // 임시로 세션 ID를 사용하는 예시입니다.
    }

    public static WebSocketSession getSessionByUserId(String userId) {
        // 사용자 ID에 해당하는 세션을 맵에서 조회하여 반환합니다.
        return sessions.get(userId);
    }

    public static void sendMessageToUser(String userId, String message) throws IOException {
      WebSocketSession session = getSessionByUserId(userId);
      if (session != null && session.isOpen()) {
          session.sendMessage(new TextMessage(message));
      } else {
          // 세션을 찾을 수 없거나 세션이 닫혀있는 경우 처리할 로직을 추가할 수 있습니다.
      }
  }
}
